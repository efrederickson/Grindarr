@page
@model Grindarr.Web.Frontend.Pages.DownloadsModel

<table id="downloadTable" class="download-table sortable">
    <tr>
        <th id="nameHeaderField">Name</th>
        <th class="sorttable_numeric">Size</th>
        <th class="sorttable_numeric">Progress</th>
        <th class="sorttable_numeric">Speed</th>
        <th>State</th>
        <th class="sorttable_nosort">
            Actions
            <button class="btn btn-sm btn-danger" onclick="deleteAll();">Cancel All</button>
        </th>
    </tr>
</table>

<script>
    
    (function () {
        
        var createDownloadEntry = function (data) {
            var id = data.id;
            var newEntry = $('<tr>', {
                "content-id": id,
            });
            $('<td>', { id: id + "-title" }).appendTo(newEntry);
            $('<td>', { id: id + "-totalSize" }).appendTo(newEntry);
            $('<td>', { id: id + "-percent" }).appendTo(newEntry);
            $('<td>', { id: id + "-downloadSpeed" }).appendTo(newEntry);
            $('<td>', { id: id + "-downloadStatus" }).appendTo(newEntry);
            var actionTd = $('<td>', { class: "display-flex" });

            $('<button>', {
                class: 'btn btn-info',
                text: 'Loading action...',
                id: id + "-togglePausedButton"
            }).click(function () {
                grindarr.getDownload(id, function (data, errData) {
                    if (data != null) {
                        if (data.progress.status == grindarr.DownloadStatus.Paused) {
                            grindarr.resumeDownload(id, function () {
                                updateDownloads();
                            });
                        } else if (data.progress.status == grindarr.DownloadStatus.Downloading || data.progress.status == grindarr.DownloadStatus.Pending) {
                            grindarr.pauseDownload(id, function () {
                                updateDownloads();
                            });
                        }
                    }
                });
            }).appendTo(actionTd);

            $('<button>', {
                class: 'btn btn-danger',
                text: 'Delete'
            }).click(function () {
                if (confirm("Are you sure you want to cancel this download?")) {
                    grindarr.cancelDownload(id, function (data, errData) {
                        if (errData != null) {
                            alert("Failed to delete download: " + errData.errorMessage);
                        }
                    });
                }
            }).appendTo(actionTd);

            actionTd.appendTo(newEntry);
            $('#downloadTable').append(newEntry);
            return newEntry;
        }

        var updateDownloadEntry = function (entry, data) {
            var id = entry.attr("content-id");

            var link = $("<a>");
            link.attr("href", data.downloadUri);
            link.attr("title", data.content.title);
            link.text(data.content.title);
            $('#' + id + "-title").empty();
            link.appendTo($('#' + id + "-title"));

            if (data.progress != null) {
                $('#' + id + "-totalSize")
                    .attr("sorttable_customkey", data.progress.BytesTotal)
                    .text(grindarr.bytesToHumanReadableString(data.progress.bytesTotal, false));
                $('#' + id + "-percent")
                    .attr("sorttable_customkey", data.progress.percentage)
                    .text((data.progress.percentage * 100).toFixed(2) + '%');
                $('#' + id + "-downloadSpeed")
                    .attr("sorttable_customkey", data.progress.unformattedDownloadSpeed)
                    .text(data.progress.downloadSpeed);
                $('#' + id + "-downloadStatus").text(grindarr.textForDownloadStatus(data.progress.status));
                $('#' + id + "-togglePausedButton").text(data.progress.status == grindarr.DownloadStatus.Paused ? "►" : "⏸︎");
            }
        }

        var getOrCreateDownloadEntry = function (data) {
            var existing = $('#downloadTable tr[content-id=' + data.id + ']');
            if (existing.length == 0)
                return createDownloadEntry(data);
            return existing;
        };

        var updateDownloads = function () {
            if ($("#loader").length != 0) {
                return;
            }
            $('<div>', { class: "loader", id: "loader" }).appendTo($("#nameHeaderField"));

            grindarr.getDownloads(function (data, errData) {

                if (data != null) {
                    // list of items to keep
                    var download_ids = [];
                    $(data).each(function (key, dl) {
                        // Create or update table entry
                        updateDownloadEntry(getOrCreateDownloadEntry(dl), dl);
                        // Add to list of to-keep
                        download_ids.push(dl.id);
                    });
                    $('#downloadTable tr').not(":first").each(function (k, child) {
                        // If not in list of to-keep, remove the old table entry
                        if (download_ids.indexOf(child.getAttribute('content-id')) < 0)
                            child.remove();
                    });

                    if ($('#downloadTable tr').not(":first").length == 0) {
                        var fakeItem = $('<tr>');
                        $('<td>', { text: "No downloads right now" }).appendTo(fakeItem);
                        for (i = 0; i < 6; i++) // add remaining fake td's
                            $('<td>').appendTo(fakeItem);
                        fakeItem.appendTo($('#downloadTable'));
                    }
                } else {
                    $('#downloadTable tr').not(":first").remove(); // Preserve header
                    var fakeItem = $('<tr>');
                    $('<td>', { text: "Unable to communicate with backend" }).appendTo(fakeItem);
                    for (i = 0; i < 6; i++) // add remaining fake td's
                        $('<td>').appendTo(fakeItem);
                    fakeItem.appendTo($('#downloadTable'));
                }
                sorttable.makeSortable(document.getElementById("downloadTable"));
                $("#loader").remove();
            });

        };

        setInterval(updateDownloads, 2000);
        updateDownloads();
    })();

    function deleteAll() {
        if (confirm("Are you sure you want to cancel ALL downloads?")) {
            $.each($("tr"), function (idx, element) {
                var contentId = $(element).attr("content-id");
                if (contentId != null) {
                    console.log("cancel all: " + contentId);
                    grindarr.cancelDownload(contentId, function (data, errData) {
                        if (errData != null) {
                            alert("Failed to delete download: " + errData.errorMessage);
                        }
                    });
                }
            });
        }
    }
</script>